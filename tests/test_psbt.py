import pytest


@pytest.fixture
def tdata(mocker):
    from collections import namedtuple
    from ur.ur import UR
    from urtypes.crypto.psbt import PSBT
    from krux.baseconv import base_encode

    TEST_MNEMONIC = "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"

    P2WPKH_PSBT = b'psbt\xff\x01\x00q\x02\x00\x00\x00\x01\xcf<X\xc3)\x82\xae P\x88\xd9\xbdI\xeb\x9b\x02\xac\xdfM=\xaev\xa5\x16\xc6\xb3\x06\xb1]\xe3\xa1N\x00\x00\x00\x00\x00\xfd\xff\xff\xff\x02|?]\x05\x00\x00\x00\x00\x16\x00\x14/4\xaa\x1c\xf0\nS\xb0U\xa2\x91\xa0:}E\xf0\xa6\x98\x8bR\x80\x96\x98\x00\x00\x00\x00\x00\x16\x00\x14\xe6j\xfe\xff\xc3\x83\x8eq\xf0\xa2{\x07\xe3\xb0\x0e\xdej\xe8\xe1`\x00\x00\x00\x00\x00\x01\x01\x1f\x00\xe1\xf5\x05\x00\x00\x00\x00\x16\x00\x14\xd0\xc4\xa3\xef\t\xe9\x97\xb6\xe9\x9e9~Q\x8f\xe3\xe4\x1a\x11\x8c\xa1"\x06\x02\xe7\xab%7\xb5\xd4\x9e\x97\x03\t\xaa\xe0n\x9eI\xf3l\xe1\xc9\xfe\xbb\xd4N\xc8\xe0\xd1\xcc\xa0\xb4\xf9\xc3\x19\x18s\xc5\xda\nT\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00"\x02\x03]I\xec\xcdT\xd0\t\x9eCgbw\xc7\xa6\xd4b]a\x1d\xa8\x8a]\xf4\x9b\xf9Qzw\x91\xa7w\xa5\x18s\xc5\xda\nT\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    P2WPKH_PSBT_B43 = "1N0HGUN:R2Q*R86JDWEOBMHAETS.D$7T+SEGWXJO3JPKXA+O3JNN$$VLXOA4R/O+2+T$0BL68OC3*:/B4SOZWX3MY9B1R0AXW5-KVBGEJJWUNUTMA5-XE+IX*M5$/.++VV9F/RHZC9:E9JT$NLGK39-VJKFHLA*C90GDVYE01C17+N*JBV0RQLT8D*1*BVK+K2K/$8.VYDK3JPC2X634YJKT57OJNX61X$4J39$.4*TZK55UAA0ALQC0PLZC61AYGB$J:SKX63U23TBU.C9NB.9C0N$RKANBNTQTYPVL1ZG6SHLT093GQFJILC0QMUYEY9F-K8.-3:JMZ4ESOL8AO+CD*7U06IVD3U6Y.$HH5PU/NPL037224KA-1A09MM76ZJ.:HY4TS-Y/8MZC6P/D6*DQF6A9"
    P2WPKH_PSBT_B58 = "UUucvki6KWyS35DhetbWPw1DiaccbHKywScF96E8VUwEnN1gss947UasRfkNxtrkzCeHziHyMCuoiQ2mSYsbYXuV3YwYBZwFh1c6xtBAEK1aDgPwMgqf74xTzf3m4KH4iUU5nHTqroDpoRZR59meafTCUBChZ5NJ8MoUdKE6avyYdSm5kUb4npmFpMpJ9S3qd2RedHMoQFRiXK3jwdH81emAEsFYSW3Kb7caPcWjkza4S4EEWWbaggofGFmxE5gNNg4A4LNC2ZUGLsALZffNvg3yh3qg6rFxhkiyzWc44kx9Khp6Evm1j4Njh8kjifkngLTPFtX3uWNLAB1XrvpPMx6kkkhr7RnFVrA4JsDp5BwVGAXBoSBLTqweFevZ5"
    P2WPKH_PSBT_B64 = "cHNidP8BAHECAAAAAc88WMMpgq4gUIjZvUnrmwKs3009rnalFsazBrFd46FOAAAAAAD9////Anw/XQUAAAAAFgAULzSqHPAKU7BVopGgOn1F8KaYi1KAlpgAAAAAABYAFOZq/v/Dg45x8KJ7B+OwDt5q6OFgAAAAAAABAR8A4fUFAAAAABYAFNDEo+8J6Ze26Z45flGP4+QaEYyhIgYC56slN7XUnpcDCargbp5J82zhyf671E7I4NHMoLT5wxkYc8XaClQAAIABAACAAAAAgAAAAAAAAAAAACICA11J7M1U0AmeQ2did8em1GJdYR2oil30m/lReneRp3elGHPF2gpUAACAAQAAgAAAAIABAAAAAAAAAAAA"
    P2WPKH_PSBT_UR_PSBT = UR("crypto-psbt", PSBT(P2WPKH_PSBT).to_cbor())

    SIGNED_P2WPKH_PSBT = b'psbt\xff\x01\x00q\x02\x00\x00\x00\x01\xcf<X\xc3)\x82\xae P\x88\xd9\xbdI\xeb\x9b\x02\xac\xdfM=\xaev\xa5\x16\xc6\xb3\x06\xb1]\xe3\xa1N\x00\x00\x00\x00\x00\xfd\xff\xff\xff\x02|?]\x05\x00\x00\x00\x00\x16\x00\x14/4\xaa\x1c\xf0\nS\xb0U\xa2\x91\xa0:}E\xf0\xa6\x98\x8bR\x80\x96\x98\x00\x00\x00\x00\x00\x16\x00\x14\xe6j\xfe\xff\xc3\x83\x8eq\xf0\xa2{\x07\xe3\xb0\x0e\xdej\xe8\xe1`\x00\x00\x00\x00\x00\x01\x01\x1f\x00\xe1\xf5\x05\x00\x00\x00\x00\x16\x00\x14\xd0\xc4\xa3\xef\t\xe9\x97\xb6\xe9\x9e9~Q\x8f\xe3\xe4\x1a\x11\x8c\xa1"\x02\x02\xe7\xab%7\xb5\xd4\x9e\x97\x03\t\xaa\xe0n\x9eI\xf3l\xe1\xc9\xfe\xbb\xd4N\xc8\xe0\xd1\xcc\xa0\xb4\xf9\xc3\x19G0D\x02 >e\xff;L\xd4\x7f\x12\x1f\xa7\xc9\x82(F\x18\xdb\x801G\xb0V\xd3\x93\x94\xd4\xecB\x0e\xfd\xfck\xa1\x02 l\xbd\xd8\x8a\xc5\x18l?.\xfd$%1\xedy\x17uvQ\xac&#t\xf3\xd3\x1d\x85\xd6\x16\xcdj\x81\x01\x00\x00\x00'
    SIGNED_P2WPKH_PSBT_B43 = "ZF1XCF+Z*C015XRRLXYR*QCNLC+GG904*T:WKMSDWEXX2VS57*S7X9FJGRN/0Q0$-OBHIJ8/B.C-BG*2ITD2B9C5VJ0AVI5GAH7LMHJ3.EY3KL*/6I*ERF8GTDFTN5KA6Z-NUJ0UV/2NBXH43OSU3T98BSCAIZ.:HWRXU/L.HMUDEJEO$3.C/80-LULS/CM0DV*$3*EM/736NIXS-0+:E-A4TDYZRGW9W181MRBNJ6A*O$VO/VT+SAX+TVO4DH.$Q$MKU6OFVP94EX8LXOK6F69TJI8T.38.BLI.55W3/928OSS-1SK022VB+Q0WZ3F33NB*EE:$*YD+*1BK.SU1EV3M2C4UG.PA.T--YRP8BB/QH:V-9F4B/XUZYCDUDAYG/CR4VT15"
    SIGNED_P2WPKH_PSBT_B58 = "2HkajtjMgNpiuo5QQYDP4zEc3vrWa1f7qgwNkMySr8EJbPoEtguwAQ2qkgA7k7NzAvLjA3FA4C9ejVxLx8vSemVQxcda4LjDyrbpinuPeSakKBjvR1XrCa5jxU29xfiaYjLTKDPPAPHCdTJy4r7Zcc9kqaTk9NxoqMhdUiNqxfyuBoDeCwMemE2UE4D5GrDMMuhJvJ2vyJkK6w9a1P7cE6gwL4CVx7LrLtwRGbUUiQ3tkr8ve57kWjyTLT1FALNVVyNfDb4kJccqZ6Nv1riwPaRRUpr2yaBkTogG4nAK31ywpiAwqxZpswjUF6gpbnLJUQDsowNjYeW9NEA83S2oL3FshKWsfcB1vhKT5DvCQZzo"
    SIGNED_P2WPKH_PSBT_B64 = "cHNidP8BAHECAAAAAc88WMMpgq4gUIjZvUnrmwKs3009rnalFsazBrFd46FOAAAAAAD9////Anw/XQUAAAAAFgAULzSqHPAKU7BVopGgOn1F8KaYi1KAlpgAAAAAABYAFOZq/v/Dg45x8KJ7B+OwDt5q6OFgAAAAAAABAR8A4fUFAAAAABYAFNDEo+8J6Ze26Z45flGP4+QaEYyhIgIC56slN7XUnpcDCargbp5J82zhyf671E7I4NHMoLT5wxlHMEQCID5l/ztM1H8SH6fJgihGGNuAMUewVtOTlNTsQg79/GuhAiBsvdiKxRhsPy79JCUx7XkXdXZRrCYjdPPTHYXWFs1qgQEAAAA="
    SIGNED_P2WPKH_PSBT_UR_PSBT = UR("crypto-psbt", PSBT(SIGNED_P2WPKH_PSBT).to_cbor())

    P2SH_P2WPKH_PSBT = b'psbt\xff\x01\x00r\x02\x00\x00\x00\x01v\xefk\xf2\xbd\xd0@\xf3\xc1\xd8:\xcc\xb9t9\xf1\xab\xb1\xa5V\xad\x1d\x0fR\x96\x81\xff\xa7\xe8\xca\x94\x8a\x01\x00\x00\x00\x00\xfd\xff\xff\xff\x02\x9c=]\x05\x00\x00\x00\x00\x17\xa9\x14%\x1d\xd1\x14W\xa2Y\xc3\xbaG\xe5\xcc\xa3q\x7f\xe4!N\x02\x98\x87\x80\x96\x98\x00\x00\x00\x00\x00\x16\x00\x14\xe6j\xfe\xff\xc3\x83\x8eq\xf0\xa2{\x07\xe3\xb0\x0e\xdej\xe8\xe1`\x00\x00\x00\x00\x00\x01\x01 \x00\xe1\xf5\x05\x00\x00\x00\x00\x17\xa9\x143l\xaa\x13\xe0\x8b\x96\x08\n2\xb5\xd8\x18\xd5\x9bJ\xb3\xb3gB\x87\x01\x04\x16\x00\x148\x97\x1fs\x93\x0fl\x14\x1d\x97z\xc4\xfdJr|\x85I5\xb3"\x06\x03\xa1\xaf\x80J\xc1\x08\xa8\xa5\x17\x82\x19\x8c-\x03K(\xbf\x90\xc8\x80?ZS\xf7bv\xfai\xa4\xea\xe7\x7f\x18s\xc5\xda\n1\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x16\x00\x14p\xbe\xb1\xe0JP\t@\xe9\xf3\xab\xaaf\xe1\xa4\x9a\xc5[\x8f5"\x02\x02\xa2\xfc\x89\x96\xc5&"H\xb5\xda\xef\xc5\xa4\xd0\xcd\xcd\x00\xc10G\xd0\xcb\x13\x02\x816\xeac\r\x87Z\x87\x18s\xc5\xda\n1\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'

    P2SH_P2WPKH_PSBT_B58 = "W7hsNtPR1YU4YQRATn9QwVubQ3s4aLKhoSpCJQtZuiqGxTQPhu1FB4bqZdtL2MpygirLgext5jZpLSRKGQEhcuiUjg5wvnyP5EP7w1RxkE4Zc5mxDKyEhRH7k3wcSA8TTahF7Rg7r2cWry4c7LySnwoAGtYP1VRwcgMfbYXroHrrKqgdfaKLmMD1M5bCYpU6fMCzcEK5hXQSFaupmhTyAPHiGAczMSmnsoaeZ4cCNpZzexK6FkYES1XTBkroLD68tYejJTjkEpASRVTwS1LUJHEUVmAgASWQ1r3x9yGQaSamXqvedoZ3dNuUsmVJNdGNjKFJRsQugzxEHEj2PWJCpYCUo4Ms79wRkSYjeaQaEEHnBLnkbhPdL6rUu5oGCpzkkgewTcH5hSPA8GefzSgLo3CrGQgY5K3GvPTH5aP6VvMWpUBHGiPqddjQzqeAePxKHi6T"
    P2SH_P2WPKH_PSBT_B64 = "cHNidP8BAHICAAAAAXbva/K90EDzwdg6zLl0OfGrsaVWrR0PUpaB/6foypSKAQAAAAD9////Apw9XQUAAAAAF6kUJR3RFFeiWcO6R+XMo3F/5CFOApiHgJaYAAAAAAAWABTmav7/w4OOcfCiewfjsA7eaujhYAAAAAAAAQEgAOH1BQAAAAAXqRQzbKoT4IuWCAoytdgY1ZtKs7NnQocBBBYAFDiXH3OTD2wUHZd6xP1KcnyFSTWzIgYDoa+ASsEIqKUXghmMLQNLKL+QyIA/WlP3Ynb6aaTq538Yc8XaCjEAAIABAACAAAAAgAAAAAAAAAAAAAEAFgAUcL6x4EpQCUDp86uqZuGkmsVbjzUiAgKi/ImWxSYiSLXa78Wk0M3NAMEwR9DLEwKBNupjDYdahxhzxdoKMQAAgAEAAIAAAACAAQAAAAAAAAAAAA=="
    P2SH_P2WPKH_PSBT_UR_PSBT = UR("crypto-psbt", PSBT(P2SH_P2WPKH_PSBT).to_cbor())

    SIGNED_P2SH_P2WPKH_PSBT = b'psbt\xff\x01\x00r\x02\x00\x00\x00\x01v\xefk\xf2\xbd\xd0@\xf3\xc1\xd8:\xcc\xb9t9\xf1\xab\xb1\xa5V\xad\x1d\x0fR\x96\x81\xff\xa7\xe8\xca\x94\x8a\x01\x00\x00\x00\x00\xfd\xff\xff\xff\x02\x9c=]\x05\x00\x00\x00\x00\x17\xa9\x14%\x1d\xd1\x14W\xa2Y\xc3\xbaG\xe5\xcc\xa3q\x7f\xe4!N\x02\x98\x87\x80\x96\x98\x00\x00\x00\x00\x00\x16\x00\x14\xe6j\xfe\xff\xc3\x83\x8eq\xf0\xa2{\x07\xe3\xb0\x0e\xdej\xe8\xe1`\x00\x00\x00\x00\x00\x01\x01 \x00\xe1\xf5\x05\x00\x00\x00\x00\x17\xa9\x143l\xaa\x13\xe0\x8b\x96\x08\n2\xb5\xd8\x18\xd5\x9bJ\xb3\xb3gB\x87"\x02\x03\xa1\xaf\x80J\xc1\x08\xa8\xa5\x17\x82\x19\x8c-\x03K(\xbf\x90\xc8\x80?ZS\xf7bv\xfai\xa4\xea\xe7\x7fG0D\x02 u\x0c\xf8\xe6\x03\x15l\xab\xaa7a`\x1f\xcb\xc5\xd92TC\x97\xbd\xed\xfeS\xeeC\xf4\x1d\xddc\x1cx\x02 4{\xe5K\xe5\xf2F\x04\xd5\x05V\xe8}K\x00\xcc\x93)\x90\x1f\r\x02,\xee?\xd8\xed\xd2\xb8\x97\xcaS\x01\x01\x04\x16\x00\x148\x97\x1fs\x93\x0fl\x14\x1d\x97z\xc4\xfdJr|\x85I5\xb3\x00\x00\x00'
    SIGNED_P2SH_P2WPKH_PSBT_B43 = "H2ZW15J2ZL-VL/WIC5AQ67IT6:2*PR$1PNPWZ67EY3.D*MU1XLGL2:M$73JM9*$9Q6EJCOAWF:258LFQ$D209+HXGLHAW1P7F0GS3/9*+TM4.972T18+WAVDG0FBTR7KD*GY.UQ*2$$O:7L015ZB$TIRBR0X0JW7FTWZJOFA2BXZ-+F2DCNJ6CGT0:5GR5BJE8XE/G*Y3S0$11D4*F.C8OGM-M*UQDY-2X0+NF6X106N2$9FZSA-*6WIW+ET$79KLN8AVDGO*6Z+ON4J43Z5S*A$UZEH5VNKO.ZQKD+VC/BJANEHK+OLCBD5H1GSQUMOHJ6VO//5Q1515V6YKJ4FLMG8OU-2M-S.+GS+T10EI6EP*GCYGQPD9389V01Q52.$A+3O-YCO55.Q*BOXPW2CF.VEPR:.HWZ**QA5NITVI3:MQWKL"
    SIGNED_P2SH_P2WPKH_PSBT_B58 = "mbNU9ochR3r2kucYTPNx2gt6qUqhQ2BCrRrQkjve3E7b4YoV1fG7Nno8bcE4Rtq5jiXfYNV1LYeRYPwek67KsJdfTL1y2pxK6Kis2hA2GF7s3eJkUzXdTBPGpmMW39bAnU2315fnDjfanJxRJsj9iefvwteXmCR2mY1vFZwDJ9E66mmtjXQjQ57bD33WoAbZqJjYucy5u8d1HmSAwBaMqfzYYNyjNkAKDCD1Jd3CZfcwo5jB1qLeq3i3hu4XGB8puf4fJ9B3uGjMAaL5Po32Wrw5RaAPBJ39hXJBskvsEKC6gcHEP92oXsTTDHQWrsAnLMs1fkjEBsvjHsWsff6PebdDCLdzRGoJavc5TUTyaydbitxWfUQT99ZCuoKQkxhGqVC65euWJCFSSR67"
    SIGNED_P2SH_P2WPKH_PSBT_B64 = "cHNidP8BAHICAAAAAXbva/K90EDzwdg6zLl0OfGrsaVWrR0PUpaB/6foypSKAQAAAAD9////Apw9XQUAAAAAF6kUJR3RFFeiWcO6R+XMo3F/5CFOApiHgJaYAAAAAAAWABTmav7/w4OOcfCiewfjsA7eaujhYAAAAAAAAQEgAOH1BQAAAAAXqRQzbKoT4IuWCAoytdgY1ZtKs7NnQociAgOhr4BKwQiopReCGYwtA0sov5DIgD9aU/didvpppOrnf0cwRAIgdQz45gMVbKuqN2FgH8vF2TJUQ5e97f5T7kP0Hd1jHHgCIDR75Uvl8kYE1QVW6H1LAMyTKZAfDQIs7j/Y7dK4l8pTAQEEFgAUOJcfc5MPbBQdl3rE/UpyfIVJNbMAAAA="
    SIGNED_P2SH_P2WPKH_PSBT_UR_PSBT = UR(
        "crypto-psbt", PSBT(SIGNED_P2SH_P2WPKH_PSBT).to_cbor()
    )

    P2WSH_PSBT = b'psbt\xff\x01\x00\xb2\x02\x00\x00\x00\x02\xadC\x87\x14J\xfae\x07\xe1>\xaeP\xda\x1b\xf1\xb5\x1ag\xb3\x0f\xfb\x8e\x0c[\x8f\x98\xf5\xb3\xb1\xa68Y\x00\x00\x00\x00\x00\xfd\xff\xff\xffig%Y\x0f\xb8\xe4r\xab#N\xeb\xf3\xbf\x04\xd9J\xc0\xba\x94\xf6\xa5\xa4\xf8B\xea\xdb\x9a\xd3c`\xd4\x01\x00\x00\x00\x00\xfd\xff\xff\xff\x02@B\x0f\x00\x00\x00\x00\x00"\x00 \xa9\x903\xc3\x86b3>Y\t\xae<=\x03\xbdq\x8d\xb2\x14Y\xfd\xd5P\x1e\xe8\xa0RaMY\xb4\xe2\xd8\xd2!\x01\x00\x00\x00\x00"\x00 \x8d\x02\x85\r\xab\x88^\xc5y\xbbm\xcb\x05\xd6 ;\x05\xf5\x17\x01\x86\xac\xb8\x90}l\xc1\xb4R\x99\xed\xd2\x00\x00\x00\x00O\x01\x045\x87\xcf\x04>b\xdf~\x80\x00\x00\x02A+I\x84\xd5I\xba^\xef\x1c\xa6\xe8\xf3u]\x9a\xe0\x16\xdam\x16ir\xca\x0eQ@6~\xddP\xda\x025\xb8K1\xdc8*|\xfbC\xba:{\x17K\xe9AaA\xe8\x16\xf6r[\xd1%\x12\xb5\xb2\xc4\xa5\xac\x14\x02\x08\xcbw0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80O\x01\x045\x87\xcf\x04\x9d\xb1\xd0\x00\x80\x00\x00\x02?\xd8\xd7;\xc7\xb8\x8c\xa4\x93Z\xa57\xbf8\x94\xd5\xe2\x88\x9f\xab4\x1ca\x8fJWo\x8f\x19\x18\xc2u\x02h\xc3\rV\x9d#j}\xccW\x1b+\xb1\xd2\xadO\xa9\xf9\xb3R\xa8\t6\xa2\x89\n\x99\xaa#\xdbx\xec\x14&\xbb\x83\xc40\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80O\x01\x045\x87\xcf\x04\xba\xc1H9\x80\x00\x00\x02\x1dO\xbe\xbd\xd9g\xe1\xafqL\t\x97\xd3\x8f\xcfg\x0b\\\xe9\xd3\x01\xc0D\x0b\xbc\xc3\xb6\xa2\x0e\xb7r\x1c\x03V\x8e\xa1\xf3`Q\x91n\xd1\xb6\x90\xc3\x9e\x12\xa8\xe7\x06\x03\xb2\x80\xbd0\xce_(\x1f)\x18\xa5Sc\xaa\x14s\xc5\xda\n0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x00\x01\x01+\x80\x96\x98\x00\x00\x00\x00\x00"\x00 \x89\x801pn\xdd\x9e\xb1"g\x85G\x15Q\xce\xa3_\x17\t\xa9o\x85\x96.2\xa0k\xf6~\xc7\x11$\x01\x05iR!\x02N\x8d\x08\x0c}}\xba\\G\xfe\xb6\xb1\xc8\x12M\xebbA\x17\xe5\x8d\x8d~\xb1J@\x04Oq\xdd\x97\xf2!\x03\x05a\xd4\x82\xad\xb9=\xf1\xef\x13\xe8ep\x1a\xf2$n\xf0\xa3l\xbc\x8c\xa5\x12=\x8e\xecw\xceN8\xc7!\x03h\x95r\xe2\x8b\x0f\xed\xa9\xd6\x98\x1c\x027\xd9\xe5\xde\xdb\xfe\xc1m\xe7\x14?h\n\x02\xed]\x15\x9fu\x87S\xae"\x06\x02N\x8d\x08\x0c}}\xba\\G\xfe\xb6\xb1\xc8\x12M\xebbA\x17\xe5\x8d\x8d~\xb1J@\x04Oq\xdd\x97\xf2\x1c&\xbb\x83\xc40\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x00\x00\x00\x00\x01\x00\x00\x00"\x06\x03\x05a\xd4\x82\xad\xb9=\xf1\xef\x13\xe8ep\x1a\xf2$n\xf0\xa3l\xbc\x8c\xa5\x12=\x8e\xecw\xceN8\xc7\x1c\x02\x08\xcbw0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x00\x00\x00\x00\x01\x00\x00\x00"\x06\x03h\x95r\xe2\x8b\x0f\xed\xa9\xd6\x98\x1c\x027\xd9\xe5\xde\xdb\xfe\xc1m\xe7\x14?h\n\x02\xed]\x15\x9fu\x87\x1cs\xc5\xda\n0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x00\x00\x00\x00\x01\x00\x00\x00\x00\x01\x01+\x80\x96\x98\x00\x00\x00\x00\x00"\x00 3w\xad03\xd1\x05\x9c\xf1\xd25\xbb\x12%\xfc\xa2\xa4\xbf&\xc9R\xd5?o\xef\xc3:-UD\x8d\xc5\x01\x05iR!\x02"\x821\x12\xe5\xcc\x88K\x91\x16\xcb!B\x0c\xc7\x92\x98$\xcd/\xe8\xb7#[\xf9\x92\xe8\xae\xde\x14l"!\x02\x83\xcdG\xe5Sm\xcby\xe7\x11\x830\xe8\xe4\x80B\x12\xf6\x96\x19\xf1\xd6\xec\x99\r\xc75\xef\xb9\xce\xc5t!\x03\x0b\x90\xed.\x86\xba\xd7\xf2\xa4\xfe\x97i\xbbA}{\xa9\xca\xa1\x12H\x07\xdb\xfb6-\xfb\xee\xb6^~\x01S\xae"\x06\x02"\x821\x12\xe5\xcc\x88K\x91\x16\xcb!B\x0c\xc7\x92\x98$\xcd/\xe8\xb7#[\xf9\x92\xe8\xae\xde\x14l"\x1c\x02\x08\xcbw0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00"\x06\x02\x83\xcdG\xe5Sm\xcby\xe7\x11\x830\xe8\xe4\x80B\x12\xf6\x96\x19\xf1\xd6\xec\x99\r\xc75\xef\xb9\xce\xc5t\x1c&\xbb\x83\xc40\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00"\x06\x03\x0b\x90\xed.\x86\xba\xd7\xf2\xa4\xfe\x97i\xbbA}{\xa9\xca\xa1\x12H\x07\xdb\xfb6-\xfb\xee\xb6^~\x01\x1cs\xc5\xda\n0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01iR!\x02\xad!\xd9\xad(\xab\x99\xac~\xdf\xd9\x1e"!O\x11YS\xab\t\xd1\xd5X\x10\x92\xfbG\xbd\xa5\x92r\xfe!\x03\xa0};\xe0\xba\xd6<\x805\xd2\x1c\x97\xb4\x10\x89\r=:\x19\xd2\xe4\x03\xaf\xb3\xfc\xfch&\xaa&<v!\x03\xa1\xa8C\xfa-A\xd9;\xd6u)a\x91_nD\x8at\x19$J>\x02\xb8\xf4\xcfb\xbc\xc6\xa7\xa2kS\xae"\x02\x02\xad!\xd9\xad(\xab\x99\xac~\xdf\xd9\x1e"!O\x11YS\xab\t\xd1\xd5X\x10\x92\xfbG\xbd\xa5\x92r\xfe\x1c\x02\x08\xcbw0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00"\x02\x03\xa0};\xe0\xba\xd6<\x805\xd2\x1c\x97\xb4\x10\x89\r=:\x19\xd2\xe4\x03\xaf\xb3\xfc\xfch&\xaa&<v\x1cs\xc5\xda\n0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00"\x02\x03\xa1\xa8C\xfa-A\xd9;\xd6u)a\x91_nD\x8at\x19$J>\x02\xb8\xf4\xcfb\xbc\xc6\xa7\xa2k\x1c&\xbb\x83\xc40\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x02\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'

    P2WSH_PSBT_B58 = "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"
    P2WSH_PSBT_B64 = "cHNidP8BALICAAAAAq1DhxRK+mUH4T6uUNob8bUaZ7MP+44MW4+Y9bOxpjhZAAAAAAD9////aWclWQ+45HKrI07r878E2UrAupT2paT4QurbmtNjYNQBAAAAAP3///8CQEIPAAAAAAAiACCpkDPDhmIzPlkJrjw9A71xjbIUWf3VUB7ooFJhTVm04tjSIQEAAAAAIgAgjQKFDauIXsV5u23LBdYgOwX1FwGGrLiQfWzBtFKZ7dIAAAAATwEENYfPBD5i336AAAACQStJhNVJul7vHKbo83VdmuAW2m0WaXLKDlFANn7dUNoCNbhLMdw4Knz7Q7o6exdL6UFhQegW9nJb0SUStbLEpawUAgjLdzAAAIABAACAAAAAgAIAAIBPAQQ1h88EnbHQAIAAAAI/2Nc7x7iMpJNapTe/OJTV4oifqzQcYY9KV2+PGRjCdQJoww1WnSNqfcxXGyux0q1PqfmzUqgJNqKJCpmqI9t47BQmu4PEMAAAgAEAAIAAAACAAgAAgE8BBDWHzwS6wUg5gAAAAh1Pvr3ZZ+GvcUwJl9OPz2cLXOnTAcBEC7zDtqIOt3IcA1aOofNgUZFu0baQw54SqOcGA7KAvTDOXygfKRilU2OqFHPF2gowAACAAQAAgAAAAIACAACAAAEBK4CWmAAAAAAAIgAgiYAxcG7dnrEiZ4VHFVHOo18XCalvhZYuMqBr9n7HESQBBWlSIQJOjQgMfX26XEf+trHIEk3rYkEX5Y2NfrFKQARPcd2X8iEDBWHUgq25PfHvE+hlcBryJG7wo2y8jKUSPY7sd85OOMchA2iVcuKLD+2p1pgcAjfZ5d7b/sFt5xQ/aAoC7V0Vn3WHU64iBgJOjQgMfX26XEf+trHIEk3rYkEX5Y2NfrFKQARPcd2X8hwmu4PEMAAAgAEAAIAAAACAAgAAgAAAAAABAAAAIgYDBWHUgq25PfHvE+hlcBryJG7wo2y8jKUSPY7sd85OOMccAgjLdzAAAIABAACAAAAAgAIAAIAAAAAAAQAAACIGA2iVcuKLD+2p1pgcAjfZ5d7b/sFt5xQ/aAoC7V0Vn3WHHHPF2gowAACAAQAAgAAAAIACAACAAAAAAAEAAAAAAQErgJaYAAAAAAAiACAzd60wM9EFnPHSNbsSJfyipL8myVLVP2/vwzotVUSNxQEFaVIhAiKCMRLlzIhLkRbLIUIMx5KYJM0v6LcjW/mS6K7eFGwiIQKDzUflU23LeecRgzDo5IBCEvaWGfHW7JkNxzXvuc7FdCEDC5DtLoa61/Kk/pdpu0F9e6nKoRJIB9v7Ni377rZefgFTriIGAiKCMRLlzIhLkRbLIUIMx5KYJM0v6LcjW/mS6K7eFGwiHAIIy3cwAACAAQAAgAAAAIACAACAAAAAAAAAAAAiBgKDzUflU23LeecRgzDo5IBCEvaWGfHW7JkNxzXvuc7FdBwmu4PEMAAAgAEAAIAAAACAAgAAgAAAAAAAAAAAIgYDC5DtLoa61/Kk/pdpu0F9e6nKoRJIB9v7Ni377rZefgEcc8XaCjAAAIABAACAAAAAgAIAAIAAAAAAAAAAAAABAWlSIQKtIdmtKKuZrH7f2R4iIU8RWVOrCdHVWBCS+0e9pZJy/iEDoH074LrWPIA10hyXtBCJDT06GdLkA6+z/PxoJqomPHYhA6GoQ/otQdk71nUpYZFfbkSKdBkkSj4CuPTPYrzGp6JrU64iAgKtIdmtKKuZrH7f2R4iIU8RWVOrCdHVWBCS+0e9pZJy/hwCCMt3MAAAgAEAAIAAAACAAgAAgAEAAAAAAAAAIgIDoH074LrWPIA10hyXtBCJDT06GdLkA6+z/PxoJqomPHYcc8XaCjAAAIABAACAAAAAgAIAAIABAAAAAAAAACICA6GoQ/otQdk71nUpYZFfbkSKdBkkSj4CuPTPYrzGp6JrHCa7g8QwAACAAQAAgAAAAIACAACAAQAAAAAAAAAAAA=="
    P2WSH_PSBT_UR_PSBT = UR("crypto-psbt", PSBT(P2WSH_PSBT).to_cbor())

    SIGNED_P2WSH_PSBT = b'psbt\xff\x01\x00\xb2\x02\x00\x00\x00\x02\xadC\x87\x14J\xfae\x07\xe1>\xaeP\xda\x1b\xf1\xb5\x1ag\xb3\x0f\xfb\x8e\x0c[\x8f\x98\xf5\xb3\xb1\xa68Y\x00\x00\x00\x00\x00\xfd\xff\xff\xffig%Y\x0f\xb8\xe4r\xab#N\xeb\xf3\xbf\x04\xd9J\xc0\xba\x94\xf6\xa5\xa4\xf8B\xea\xdb\x9a\xd3c`\xd4\x01\x00\x00\x00\x00\xfd\xff\xff\xff\x02@B\x0f\x00\x00\x00\x00\x00"\x00 \xa9\x903\xc3\x86b3>Y\t\xae<=\x03\xbdq\x8d\xb2\x14Y\xfd\xd5P\x1e\xe8\xa0RaMY\xb4\xe2\xd8\xd2!\x01\x00\x00\x00\x00"\x00 \x8d\x02\x85\r\xab\x88^\xc5y\xbbm\xcb\x05\xd6 ;\x05\xf5\x17\x01\x86\xac\xb8\x90}l\xc1\xb4R\x99\xed\xd2\x00\x00\x00\x00\x00\x01\x01+\x80\x96\x98\x00\x00\x00\x00\x00"\x00 \x89\x801pn\xdd\x9e\xb1"g\x85G\x15Q\xce\xa3_\x17\t\xa9o\x85\x96.2\xa0k\xf6~\xc7\x11$"\x02\x03h\x95r\xe2\x8b\x0f\xed\xa9\xd6\x98\x1c\x027\xd9\xe5\xde\xdb\xfe\xc1m\xe7\x14?h\n\x02\xed]\x15\x9fu\x87G0D\x02 h?m\x19\x04C\x89\x95\x8b\xba\xed\xbb\xba8)\t\xae^\xe3`\x16G\xc8\x8bq\x9c\x0e\xbc\xc5\xb1j\xa2\x02 \x05\rP(\xe0\x9cc])q\xe5\xe2S\x9f\xaf+\xe4_\xa9\xc6\xf9\r"%\xf4\xa2\x00;\xa2\xaf2W\x01\x01\x05iR!\x02N\x8d\x08\x0c}}\xba\\G\xfe\xb6\xb1\xc8\x12M\xebbA\x17\xe5\x8d\x8d~\xb1J@\x04Oq\xdd\x97\xf2!\x03\x05a\xd4\x82\xad\xb9=\xf1\xef\x13\xe8ep\x1a\xf2$n\xf0\xa3l\xbc\x8c\xa5\x12=\x8e\xecw\xceN8\xc7!\x03h\x95r\xe2\x8b\x0f\xed\xa9\xd6\x98\x1c\x027\xd9\xe5\xde\xdb\xfe\xc1m\xe7\x14?h\n\x02\xed]\x15\x9fu\x87S\xae\x00\x01\x01+\x80\x96\x98\x00\x00\x00\x00\x00"\x00 3w\xad03\xd1\x05\x9c\xf1\xd25\xbb\x12%\xfc\xa2\xa4\xbf&\xc9R\xd5?o\xef\xc3:-UD\x8d\xc5"\x02\x03\x0b\x90\xed.\x86\xba\xd7\xf2\xa4\xfe\x97i\xbbA}{\xa9\xca\xa1\x12H\x07\xdb\xfb6-\xfb\xee\xb6^~\x01G0D\x02 ~O\x1b\x8c\xbb\x87x\xa3\xbb\xff\x04\xd8\x10Cq\xc8Y\x0f;N6\x97\xd8S\xfeti\x80\xb3\x12\xe0>\x02 l\x93=\x02m\xb4<\x90\xf4%\xf9Z${\xb7\xecO\x19\x15\xa3\xa3S\xf2Q\x81\xdcX\xfb\xd5&\x9e\xc5\x01\x01\x05iR!\x02"\x821\x12\xe5\xcc\x88K\x91\x16\xcb!B\x0c\xc7\x92\x98$\xcd/\xe8\xb7#[\xf9\x92\xe8\xae\xde\x14l"!\x02\x83\xcdG\xe5Sm\xcby\xe7\x11\x830\xe8\xe4\x80B\x12\xf6\x96\x19\xf1\xd6\xec\x99\r\xc75\xef\xb9\xce\xc5t!\x03\x0b\x90\xed.\x86\xba\xd7\xf2\xa4\xfe\x97i\xbbA}{\xa9\xca\xa1\x12H\x07\xdb\xfb6-\xfb\xee\xb6^~\x01S\xae\x00\x00\x00'

    SIGNED_P2WSH_PSBT_B58 = "8zF2eD2uMaxb2DsPbbKRp9Mpm1UH66wJ4uSMZPn5MA1nJwE8S3RAGDWCCvsguUhQDPCPVw5S8GsAJvAc811WwP71guKubiPxppUKqaWUkQN71B18krk1K2NrWCA9ewdJE1d1BopmzNBr5Qg3qZNCsN6EDSCn8uow2r97h2rnokSq4nXfy3KE2v7hBrGvSZw8A96WAJDSEnS1sP7U5wgtiSYdWxEHBfKocVC3G3sayPuMEjzA9QcYWpy1U6S3EW8YWw5kvQW88LKg8b3js9R7w9aWFnQwMdRg3CFSfGkoHegiWSufPejQ65Airoo8WqNvGVacmSZybkmcvu57KRobPuhZCDPbtJ5435eJsarQ9nmRpac6VJNoLrdHvkeWRZ9QEXk654TW7z6NV87it5vPVDNEnFW3c9pAdtZsYXHafw7CMSiWRPEsCoRKzodieHJFfeHiJGT5zqcP3bgmHTszp3GPMdRy3onHeFRCoyftuAEBkwsCyaYFwoSBE6YUgjHT1T4mWCoe7W4ktoDEKXsHawFC6sw6KCPzDbuTZJuaDoWijHeo7FnC97QVvMNHdVgz1ZmCerxQLrkFJsT8x5WYuVoMmcHRpbyRcuCV64YYPgFFfCZs7VVedPsgSNdkQ7qKCqVYnTaNiBpeE5NB4gwcMcCYUJMWXkqCq7t91o9Mi5ozv4R9yPonSUaTH13D6FSPY9RSZbU1F9SMgFXBoB4DdssC36RGpqZ3Fnm77RJB5v1WJAQ95RNXHuSuKB43X1HiiKYKohtFrwd7jCtbUGuUUs9mpd7VqdvVtbSE9jpQxgxJHvF983X43ZxKcE2K8AMr4WyL8s2Pi2Xj644V9zauy2qmLeNusxudGNgPdTsktjEoWCSuFPtxuqcmC8MwXh5cSQqiFkULgFNuGtkUajJQEnfW9jMfjm5y7Va5DhJN4S7MN371DgiusGnsmb5YZGBeycptyDykdsFXYs"
    SIGNED_P2WSH_PSBT_B64 = "cHNidP8BALICAAAAAq1DhxRK+mUH4T6uUNob8bUaZ7MP+44MW4+Y9bOxpjhZAAAAAAD9////aWclWQ+45HKrI07r878E2UrAupT2paT4QurbmtNjYNQBAAAAAP3///8CQEIPAAAAAAAiACCpkDPDhmIzPlkJrjw9A71xjbIUWf3VUB7ooFJhTVm04tjSIQEAAAAAIgAgjQKFDauIXsV5u23LBdYgOwX1FwGGrLiQfWzBtFKZ7dIAAAAAAAEBK4CWmAAAAAAAIgAgiYAxcG7dnrEiZ4VHFVHOo18XCalvhZYuMqBr9n7HESQiAgNolXLiiw/tqdaYHAI32eXe2/7BbecUP2gKAu1dFZ91h0cwRAIgaD9tGQRDiZWLuu27ujgpCa5e42AWR8iLcZwOvMWxaqICIAUNUCjgnGNdKXHl4lOfryvkX6nG+Q0iJfSiADuirzJXAQEFaVIhAk6NCAx9fbpcR/62scgSTetiQRfljY1+sUpABE9x3ZfyIQMFYdSCrbk98e8T6GVwGvIkbvCjbLyMpRI9jux3zk44xyEDaJVy4osP7anWmBwCN9nl3tv+wW3nFD9oCgLtXRWfdYdTrgABASuAlpgAAAAAACIAIDN3rTAz0QWc8dI1uxIl/KKkvybJUtU/b+/DOi1VRI3FIgIDC5DtLoa61/Kk/pdpu0F9e6nKoRJIB9v7Ni377rZefgFHMEQCIH5PG4y7h3iju/8E2BBDcchZDztONpfYU/50aYCzEuA+AiBskz0CbbQ8kPQl+Voke7fsTxkVo6NT8lGB3Fj71SaexQEBBWlSIQIigjES5cyIS5EWyyFCDMeSmCTNL+i3I1v5kuiu3hRsIiECg81H5VNty3nnEYMw6OSAQhL2lhnx1uyZDcc177nOxXQhAwuQ7S6GutfypP6XabtBfXupyqESSAfb+zYt++62Xn4BU64AAAA="
    SIGNED_P2WSH_PSBT_UR_PSBT = UR("crypto-psbt", PSBT(SIGNED_P2WSH_PSBT).to_cbor())

    P2SH_P2WSH_PSBT = b'psbt\xff\x01\x00r\x02\x00\x00\x00\x01\x1d\xf4\'\xad\xbd\x8bv?G\xcc(F\x92\xd0\xf4\x95\x1a\xdfZ\xca\xc7#>7.\r\x12\xc9\x9e\xe3\xc1\x96\x00\x00\x00\x00\x00\xfd\xff\xff\xff\x02\xdc9]\x05\x00\x00\x00\x00\x17\xa9\x14u!\x12s7Xj\x012N\x85TI|\x93\xf1T\xcd\xcf\xe3\x87\x80\x96\x98\x00\x00\x00\x00\x00\x16\x00\x14\xe6j\xfe\xff\xc3\x83\x8eq\xf0\xa2{\x07\xe3\xb0\x0e\xdej\xe8\xe1`\x00\x00\x00\x00O\x01\x045\x87\xcf\x04>b\xdf~\x80\x00\x00\x01\xdd\\H\xf6v\x7f\x04`\x9f\xabE\xd5\xc4b\xeeej\xae\xa5$\x8eL\xa7\xed\xed\xebw$\xc2\xdc\xb4\xe5\x02\xab$\x13O{\x08pA\xa1\x8fa\x18\x9f\xeb\xe5\xda\xc6\x8c\xc5^\xf4\xd7\x9f\xbaT\xdb\x81\xfa}\x1c\xb5\x17\x14\x02\x08\xcbw0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80O\x01\x045\x87\xcf\x04\x9d\xb1\xd0\x00\x80\x00\x00\x01\xe7\x8e\xbf\x9e\xa8y\xa6\x85N\xb3h\x9c\xc2\x83\x1eMB\xf1\xba\xdbXaovW\x9cV\xe7\xbe\xbfO\xd1\x02\x7f\xe0\xe3"7\xa1\x8b2z~\xce9\xc4\xfbq\xa6%\xe0\xc9\xfb\x9d\x06\xf2\xa2q\xdc\xba\xc5\x11\xf8hs\x14&\xbb\x83\xc40\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80O\x01\x045\x87\xcf\x04\xba\xc1H9\x80\x00\x00\x01\xa7:\xdb\xe2\x87\x84\x87cM\xcb\xfc?~\xbd\xe8\xb1\xfc\x99O\x1e\xc0h`\xcf\x01\xc3\xfe.\xa7\x91\xdd\xb6\x02\xe6**\x99s\xeek:z\xf4|"\x9a[\xdep\xbc\xa5\x9b\xd0K\xbb)\x7fV\x93\xd7\xaa%k\x97m\x14s\xc5\xda\n0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x00\x01\x01 \x00\xe1\xf5\x05\x00\x00\x00\x00\x17\xa9\x14\xaf\xde\t\'\xf3\xbd\xf5\xa9\xc3\xdbH;\xb8L\x93\xa5$\x96\x7f>\x87\x01\x04"\x00 \xe7\xa2\x14\x15\xf9\xc7K\xd7\xe8&\x9c\xac\x05\x15\xa2\xfa\xec\xd40\xc2p\xa2R\xe6\xaam\x15-\xec\x8e\x90\xe9\x01\x05iR!\x02g\xeaEbC\x93V0~xo\xaf@P70\xd8\xd9Z :\x0e4\\\xb3U\xa5\xdf\xa0?\xce\x03!\x03f rK\xb0\x8d\xa8v\xf7\x08\x95F\x00:\xc0\\y\xd7\xee\x9a\xca\xbc\xde\x08\x846xN3\x7f\x13\xed!\x03\xa7RPg\xdbg\'\xd8#\xc2fC\x12#\xa7\x03i\x92\xb6JR\xd5\xdbJ\xd3\xea\x9a\x8c\xa1\x00\x89\xb0S\xae"\x06\x02g\xeaEbC\x93V0~xo\xaf@P70\xd8\xd9Z :\x0e4\\\xb3U\xa5\xdf\xa0?\xce\x03\x1cs\xc5\xda\n0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00"\x06\x03f rK\xb0\x8d\xa8v\xf7\x08\x95F\x00:\xc0\\y\xd7\xee\x9a\xca\xbc\xde\x08\x846xN3\x7f\x13\xed\x1c&\xbb\x83\xc40\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00"\x06\x03\xa7RPg\xdbg\'\xd8#\xc2fC\x12#\xa7\x03i\x92\xb6JR\xd5\xdbJ\xd3\xea\x9a\x8c\xa1\x00\x89\xb0\x1c\x02\x08\xcbw0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"\x00 d\x1c\x13\xabNQ\x92\x9a\x8a\xbf\xa1U\xe8\xb4#\xb8\xcd;B\xfd?m\x87\xd6U\xcfMQ\x03\x85\xbf\x04\x01\x01iR!\x027\xda5Ru8\x1e\xbb\xbf\x98d\xaa\xd6~\x03\x99\xd8\x9f\xcbW~\x9c\xe6\xb0h\x02\x94\xf3\x86\xb3e\x0c!\x02\xfa\x11*\x9bu\xe6F\xdf:\xd8\x01E{"{\xa7Y\xbc\x03\xe5{s8\xfa9\xa8\xd46\x00\x9f\x83\x81!\x03\xf3\x14U\xfcF\x87\x897>\x8d\xcb\x07\xc0\xa61\x1b/ w\x064\xed\x1e\x95H\x04M\xa2\x13d\r\xd4S\xae"\x02\x027\xda5Ru8\x1e\xbb\xbf\x98d\xaa\xd6~\x03\x99\xd8\x9f\xcbW~\x9c\xe6\xb0h\x02\x94\xf3\x86\xb3e\x0c\x1c\x02\x08\xcbw0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00"\x02\x02\xfa\x11*\x9bu\xe6F\xdf:\xd8\x01E{"{\xa7Y\xbc\x03\xe5{s8\xfa9\xa8\xd46\x00\x9f\x83\x81\x1c&\xbb\x83\xc40\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00"\x02\x03\xf3\x14U\xfcF\x87\x897>\x8d\xcb\x07\xc0\xa61\x1b/ w\x064\xed\x1e\x95H\x04M\xa2\x13d\r\xd4\x1cs\xc5\xda\n0\x00\x00\x80\x01\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'

    P2SH_P2WSH_PSBT_B58 = "iKPPtgBuDNJvZAkJsisSSKkAar78K5TV6Yt41d6teHVeAnqMdnN9j6cd3vgbKtuVYUFg6QJ6RyqarHnqd6jkYSxZxFPimGq9LG4BDffByiQnRkSzTm9CGVK5XYMP1U5REj1PVebpKoQrgXJyWdjautuAVrpkuAhUm7aHDYj5fYBVzqVRJ8GWpJrY3ZzhMNXLdej9UT3DhBHRf8ATeCZrn5JK3CKSkwTjF7Q97DqwjjSDnx9x8NX5v9UcWJyLnxc9Sj5TJDfBQ2MAjFgCd7fFXBxYbavLnhgfjjzades8wgAVxqMJSSN7tbhQacqu1FxVXLBxZsueHK6e4w2o7z3CGUYqJh53TN3KFENTyRh55HrnsAiBy9Kvnho3E4ey141PToTD3uShXef1s3kKKGhgUtYXmoCMqZshuce3wxjJP6A2Kzn6r9kcEXtNbrXEArnuihJ1bq2dS58Kg55WuwmXLZqMFwXTxj96Ds3hjeG8pJMpBKvUNRuJyPUUKPTtGAHUEsDzVL7kzcBLKdHiG8qPgS5PQHUW7jkik32BrHrDsvHK1t6SBLF8PKpdkZjPo6Pad4p7uS3vyXkV3bvucpjcR2jq4kmj1p5y73cUKFiopBujFRUTfX5dzU96KXZK5tkiWVcUF9hRvmaEfSKwfvVN5B7ThQrZkuMdKoB5VHAie3LrqEyzduJbwcA2ErTGCjArkJxY2YH9KeostknMwNn83C843L38nxqh2UXgd9CGgG57tvPg2BHqBd7pWXfbHCvazHao5i3M1QesrhDvW4tteabJjRQqsEaxiumg8R5J7ByRgxZFBgGQnU6PH8VkNQCVPBWpAdm4XCpccgFsSkbB1VaYJCfXF1qVCDvC9HZ2VfJCKwHvmagZ6hTeoxx1M4nh51tNeJEGSZahTxnWsF49me35MNXBS3agEQ42RACSgDUdPvCveyK2yUqnX5Ka4A5fMznqEZDhFQsfMrude688TKLyqtc4KfVXSDjZgK2xdpt8BsXHM77mA1vynDSkAps9L7qnPwx4UaGimG8XESSHBQSvyxE7U6j3UZiDLtuWeSwJMcjzEUAKuVhAAYAdv6qQkjwueHMPNifpgpoahUqhphExtzxsQujpsNAiYg5U3RqfbWQ77appzjFmGmvKrC8vXyGMzwM11Fve5ac8CKPssfjxeeZ53ufpCdgbLFLd7AVSA3HHhUpiEyuRVnhL5BGtQCvz1MvpbcNYyBwAZ6uRxnhjMmbxTnZ5qiyJEdmssTxZxhV5cYjZtngQun27QffbMqMvB83zrJKcr6SrahWmGabjXULdJVqqqbaY5KWsq5jFBh6B4FMR6zhxYj742d32zHWJWf4PwEQ1HdHZKiQgYrUKE5Rys2XKRSMK9AvYxEcMRTvW2Zhv4uDeDNS1ESsFQcS3ZR1kmZV8ZXzEfQFcXUa5dyjfYyoAXqkJZP8LcdjrUmWjdHezcn1CPJ4pf8zNirSufggFYhRbFkahK4rx9QzD2T4qCT5ygabSqUZHXgqnAxsHmoSD6w4oH7BrH55trHjRChXCVhs4qoU34s"
    P2SH_P2WSH_PSBT_B64 = "cHNidP8BAHICAAAAAR30J629i3Y/R8woRpLQ9JUa31rKxyM+Ny4NEsme48GWAAAAAAD9////Atw5XQUAAAAAF6kUdSESczdYagEyToVUSXyT8VTNz+OHgJaYAAAAAAAWABTmav7/w4OOcfCiewfjsA7eaujhYAAAAABPAQQ1h88EPmLffoAAAAHdXEj2dn8EYJ+rRdXEYu5laq6lJI5Mp+3t63ckwty05QKrJBNPewhwQaGPYRif6+XaxozFXvTXn7pU24H6fRy1FxQCCMt3MAAAgAEAAIAAAACAAQAAgE8BBDWHzwSdsdAAgAAAAeeOv56oeaaFTrNonMKDHk1C8brbWGFvdlecVue+v0/RAn/g4yI3oYsyen7OOcT7caYl4Mn7nQbyonHcusUR+GhzFCa7g8QwAACAAQAAgAAAAIABAACATwEENYfPBLrBSDmAAAABpzrb4oeEh2NNy/w/fr3osfyZTx7AaGDPAcP+LqeR3bYC5ioqmXPuazp69HwimlvecLylm9BLuyl/VpPXqiVrl20Uc8XaCjAAAIABAACAAAAAgAEAAIAAAQEgAOH1BQAAAAAXqRSv3gkn8731qcPbSDu4TJOlJJZ/PocBBCIAIOeiFBX5x0vX6CacrAUVovrs1DDCcKJS5qptFS3sjpDpAQVpUiECZ+pFYkOTVjB+eG+vQFA3MNjZWiA6DjRcs1Wl36A/zgMhA2Ygckuwjah29wiVRgA6wFx51+6ayrzeCIQ2eE4zfxPtIQOnUlBn22cn2CPCZkMSI6cDaZK2SlLV20rT6pqMoQCJsFOuIgYCZ+pFYkOTVjB+eG+vQFA3MNjZWiA6DjRcs1Wl36A/zgMcc8XaCjAAAIABAACAAAAAgAEAAIAAAAAAAAAAACIGA2Ygckuwjah29wiVRgA6wFx51+6ayrzeCIQ2eE4zfxPtHCa7g8QwAACAAQAAgAAAAIABAACAAAAAAAAAAAAiBgOnUlBn22cn2CPCZkMSI6cDaZK2SlLV20rT6pqMoQCJsBwCCMt3MAAAgAEAAIAAAACAAQAAgAAAAAAAAAAAAAEAIgAgZBwTq05RkpqKv6FV6LQjuM07Qv0/bYfWVc9NUQOFvwQBAWlSIQI32jVSdTgeu7+YZKrWfgOZ2J/LV36c5rBoApTzhrNlDCEC+hEqm3XmRt862AFFeyJ7p1m8A+V7czj6OajUNgCfg4EhA/MUVfxGh4k3Po3LB8CmMRsvIHcGNO0elUgETaITZA3UU64iAgI32jVSdTgeu7+YZKrWfgOZ2J/LV36c5rBoApTzhrNlDBwCCMt3MAAAgAEAAIAAAACAAQAAgAEAAAAAAAAAIgIC+hEqm3XmRt862AFFeyJ7p1m8A+V7czj6OajUNgCfg4EcJruDxDAAAIABAACAAAAAgAEAAIABAAAAAAAAACICA/MUVfxGh4k3Po3LB8CmMRsvIHcGNO0elUgETaITZA3UHHPF2gowAACAAQAAgAAAAIABAACAAQAAAAAAAAAAAA=="
    P2SH_P2WSH_PSBT_UR_PSBT = UR("crypto-psbt", PSBT(P2SH_P2WSH_PSBT).to_cbor())

    SIGNED_P2SH_P2WSH_PSBT = b'psbt\xff\x01\x00r\x02\x00\x00\x00\x01\x1d\xf4\'\xad\xbd\x8bv?G\xcc(F\x92\xd0\xf4\x95\x1a\xdfZ\xca\xc7#>7.\r\x12\xc9\x9e\xe3\xc1\x96\x00\x00\x00\x00\x00\xfd\xff\xff\xff\x02\xdc9]\x05\x00\x00\x00\x00\x17\xa9\x14u!\x12s7Xj\x012N\x85TI|\x93\xf1T\xcd\xcf\xe3\x87\x80\x96\x98\x00\x00\x00\x00\x00\x16\x00\x14\xe6j\xfe\xff\xc3\x83\x8eq\xf0\xa2{\x07\xe3\xb0\x0e\xdej\xe8\xe1`\x00\x00\x00\x00\x00\x01\x01 \x00\xe1\xf5\x05\x00\x00\x00\x00\x17\xa9\x14\xaf\xde\t\'\xf3\xbd\xf5\xa9\xc3\xdbH;\xb8L\x93\xa5$\x96\x7f>\x87"\x02\x02g\xeaEbC\x93V0~xo\xaf@P70\xd8\xd9Z :\x0e4\\\xb3U\xa5\xdf\xa0?\xce\x03G0D\x02 \x1f\xa0f\x1ct\xd6\xb9S\xbd\xc4"\x0cY\x19\xe0\xe4p\xdc\xe8qR\xc8$\xf4Hf\xa6\x07\x8e\xda\x16b\x02 W;\xfb\xc0\xbaWo]/\xcc\xd8\xdb\xe8\xc85\xee\x9bx\x1c\xea\xba\xf4[vM\xac\xc2\x11\xae-G\xc7\x01\x01\x04"\x00 \xe7\xa2\x14\x15\xf9\xc7K\xd7\xe8&\x9c\xac\x05\x15\xa2\xfa\xec\xd40\xc2p\xa2R\xe6\xaam\x15-\xec\x8e\x90\xe9\x01\x05iR!\x02g\xeaEbC\x93V0~xo\xaf@P70\xd8\xd9Z :\x0e4\\\xb3U\xa5\xdf\xa0?\xce\x03!\x03f rK\xb0\x8d\xa8v\xf7\x08\x95F\x00:\xc0\\y\xd7\xee\x9a\xca\xbc\xde\x08\x846xN3\x7f\x13\xed!\x03\xa7RPg\xdbg\'\xd8#\xc2fC\x12#\xa7\x03i\x92\xb6JR\xd5\xdbJ\xd3\xea\x9a\x8c\xa1\x00\x89\xb0S\xae\x00\x00\x00'
    SIGNED_P2SH_P2WSH_PSBT_B43 = "CLQSGDZJQB4QIYKX08*DIBD23JSA8U413ZNG9T3LLKAV.2DC.M8794QPU1:E4Z06VG/+F$UKCBSIQH3V:N++4QS1NS:YJ1Z.JQ*+3T6D6PX-:WY8SYCHKR2GYKWNO46W:E$J65W$Y:1L*W0P5AUI9W:*PFQ*LX*+M$-BPO6-T31GOZFN$GMQ5RIB3VUKGNK-DXJKC6I236.$ZOEXVHM*D6ZM9+6QCXPMLG.P6O6O/P/QGGUEP8BMD.14T4H.1HEOF2*QI1PF*R.386+U8NOCJ3UE30ME5W$R*3APP:44M-WYBCU53QI1QV/QPVWF.T0$6EVP-YRSGZB34L+UTZ83H*NRJAYG79SXZATFWO9$R4XM5.O0WMVQ.3-*84Z8QVF38:O:6-PAOOUYUF1HK*+VKPC*JL6OSR-TH*FEQRPN4-9P4R*RWILCM5A:Y$48G4*B60N*E48WUH7$Q5PM8BCKWV-7UB0P4+TNUXR*P+E8/9FS$C$BFBOBL0GEU+5TGLVO:+8D-$OBU92TC43:0P17WZ1MINZKXD$B8.2$/9Z$Z*K7:QASII2WDNX7TQB416Q-C$J.:4-QCUF0X$FG+NRRD0-ABQ+ZX280T"
    SIGNED_P2SH_P2WSH_PSBT_B58 = "UHKpqoaYsQu3iUJNB2senWYdHBJvWXgfwPpJqqeAgk8xfULMYw45dxfzet7W38RH77S7DsUfemWVfASNVja4cwR3oN4233ve3Ma5tKQ3JoU9wLCkbRywAqepAah5sGDtx6QpS5G2w5ZYeVWjBdZ4obcNBQkT4umEjsALQfMwTHk31xivf9rmvQEizfP7geH6wufyXbMa3kg2h4c1CYE2eZC6tvcCKnHDJurq5yLfrhUSEjw8JpgSYxMiqmrMa8auJ25XQhpaPdcpYKXT9c7xhUNrTFuokHbfHiosxe8UMhRAHwmR2opgUBJvLq6ACokkn5UupGxrNmRSc1iJBBghokW1U9Wa9NtjiZLFcy86CS2wtt5UdtQ31BA3Capr5sBHER6vFLfVTqG6tdZ9LDaZmScBEzKsc6DRmhGGYFcGfaEBreiC6hvtHiN3xEFXS1DuJ4Xf6cE6QXit1q4vu1cMjhvnHV2LPTW8P6B696CXSa5FK4gn64FAn5G9WJNjJUfVuV3RHUgJwVXV83C2i5cXk2diUBFtDgzsboeqnh82GKKLkP5rjvBh"
    SIGNED_P2SH_P2WSH_PSBT_B64 = "cHNidP8BAHICAAAAAR30J629i3Y/R8woRpLQ9JUa31rKxyM+Ny4NEsme48GWAAAAAAD9////Atw5XQUAAAAAF6kUdSESczdYagEyToVUSXyT8VTNz+OHgJaYAAAAAAAWABTmav7/w4OOcfCiewfjsA7eaujhYAAAAAAAAQEgAOH1BQAAAAAXqRSv3gkn8731qcPbSDu4TJOlJJZ/PociAgJn6kViQ5NWMH54b69AUDcw2NlaIDoONFyzVaXfoD/OA0cwRAIgH6BmHHTWuVO9xCIMWRng5HDc6HFSyCT0SGamB47aFmICIFc7+8C6V29dL8zY2+jINe6beBzquvRbdk2swhGuLUfHAQEEIgAg56IUFfnHS9foJpysBRWi+uzUMMJwolLmqm0VLeyOkOkBBWlSIQJn6kViQ5NWMH54b69AUDcw2NlaIDoONFyzVaXfoD/OAyEDZiByS7CNqHb3CJVGADrAXHnX7prKvN4IhDZ4TjN/E+0hA6dSUGfbZyfYI8JmQxIjpwNpkrZKUtXbStPqmoyhAImwU64AAAA="
    SIGNED_P2SH_P2WSH_PSBT_UR_PSBT = UR(
        "crypto-psbt", PSBT(SIGNED_P2SH_P2WSH_PSBT).to_cbor()
    )

    MISSING_GLOBAL_XPUBS_PSBT = "cHNidP8BAFUCAAAAASeaIyOl37UfxF8iD6WLD8E+HjNCeSqF1+Ns1jM7XLw5AAAAAAD/////AaBa6gsAAAAAGXapFP/pwAYQl8w7Y28ssEYPpPxCfStFiKwAAAAAAAEBIJVe6gsAAAAAF6kUY0UgD2jRieGtwN8cTRbqjxTA2+uHIgIDsTQcy6doO2r08SOM1ul+cWfVafrEfx5I1HVBhENVvUZGMEMCIAQktY7/qqaU4VWepck7v9SokGQiQFXN8HC2dxRpRC0HAh9cjrD+plFtYLisszrWTt5g6Hhb+zqpS5m9+GFR25qaAQEEIgAgdx/RitRZZm3Unz1WTj28QvTIR3TjYK2haBao7UiNVoEBBUdSIQOxNBzLp2g7avTxI4zW6X5xZ9Vp+sR/HkjUdUGEQ1W9RiED3lXR4drIBeP4pYwfv5uUwC89uq/hJ/78pJlfJvggg71SriIGA7E0HMunaDtq9PEjjNbpfnFn1Wn6xH8eSNR1QYRDVb1GELSmumcAAACAAAAAgAQAAIAiBgPeVdHh2sgF4/iljB+/m5TALz26r+En/vykmV8m+CCDvRC0prpnAAAAgAAAAIAFAACAAAA="

    return namedtuple(
        "TestData",
        [
            "TEST_MNEMONIC",
            "P2WPKH_PSBT",
            "P2WPKH_PSBT_B43",
            "P2WPKH_PSBT_B58",
            "P2WPKH_PSBT_B64",
            "P2WPKH_PSBT_UR_PSBT",
            "SIGNED_P2WPKH_PSBT",
            "SIGNED_P2WPKH_PSBT_B43",
            "SIGNED_P2WPKH_PSBT_B58",
            "SIGNED_P2WPKH_PSBT_B64",
            "SIGNED_P2WPKH_PSBT_UR_PSBT",
            "P2SH_P2WPKH_PSBT",
            "P2SH_P2WPKH_PSBT_B43",
            "P2SH_P2WPKH_PSBT_B58",
            "P2SH_P2WPKH_PSBT_B64",
            "P2SH_P2WPKH_PSBT_UR_PSBT",
            "SIGNED_P2SH_P2WPKH_PSBT",
            "SIGNED_P2SH_P2WPKH_PSBT_B43",
            "SIGNED_P2SH_P2WPKH_PSBT_B58",
            "SIGNED_P2SH_P2WPKH_PSBT_B64",
            "SIGNED_P2SH_P2WPKH_PSBT_UR_PSBT",
            "P2WSH_PSBT",
            "P2WSH_PSBT_B43",
            "P2WSH_PSBT_B58",
            "P2WSH_PSBT_B64",
            "P2WSH_PSBT_UR_PSBT",
            "SIGNED_P2WSH_PSBT",
            "SIGNED_P2WSH_PSBT_B43",
            "SIGNED_P2WSH_PSBT_B58",
            "SIGNED_P2WSH_PSBT_B64",
            "SIGNED_P2WSH_PSBT_UR_PSBT",
            "P2SH_P2WSH_PSBT",
            "P2SH_P2WSH_PSBT_B43",
            "P2SH_P2WSH_PSBT_B58",
            "P2SH_P2WSH_PSBT_B64",
            "P2SH_P2WSH_PSBT_UR_PSBT",
            "SIGNED_P2SH_P2WSH_PSBT",
            "SIGNED_P2SH_P2WSH_PSBT_B43",
            "SIGNED_P2SH_P2WSH_PSBT_B58",
            "SIGNED_P2SH_P2WSH_PSBT_B64",
            "SIGNED_P2SH_P2WSH_PSBT_UR_PSBT",
            "MISSING_GLOBAL_XPUBS_PSBT",
        ],
    )(
        TEST_MNEMONIC,
        P2WPKH_PSBT,
        P2WPKH_PSBT_B43,
        P2WPKH_PSBT_B58,
        P2WPKH_PSBT_B64,
        P2WPKH_PSBT_UR_PSBT,
        SIGNED_P2WPKH_PSBT,
        SIGNED_P2WPKH_PSBT_B43,
        SIGNED_P2WPKH_PSBT_B58,
        SIGNED_P2WPKH_PSBT_B64,
        SIGNED_P2WPKH_PSBT_UR_PSBT,
        P2SH_P2WPKH_PSBT,
        P2SH_P2WPKH_PSBT_B43,
        P2SH_P2WPKH_PSBT_B58,
        P2SH_P2WPKH_PSBT_B64,
        P2SH_P2WPKH_PSBT_UR_PSBT,
        SIGNED_P2SH_P2WPKH_PSBT,
        SIGNED_P2SH_P2WPKH_PSBT_B43,
        SIGNED_P2SH_P2WPKH_PSBT_B58,
        SIGNED_P2SH_P2WPKH_PSBT_B64,
        SIGNED_P2SH_P2WPKH_PSBT_UR_PSBT,
        P2WSH_PSBT,
        P2WSH_PSBT_B43,
        P2WSH_PSBT_B58,
        P2WSH_PSBT_B64,
        P2WSH_PSBT_UR_PSBT,
        SIGNED_P2WSH_PSBT,
        SIGNED_P2WSH_PSBT_B43,
        SIGNED_P2WSH_PSBT_B58,
        SIGNED_P2WSH_PSBT_B64,
        SIGNED_P2WSH_PSBT_UR_PSBT,
        P2SH_P2WSH_PSBT,
        P2SH_P2WSH_PSBT_B43,
        P2SH_P2WSH_PSBT_B58,
        P2SH_P2WSH_PSBT_B64,
        P2SH_P2WSH_PSBT_UR_PSBT,
        SIGNED_P2SH_P2WSH_PSBT,
        SIGNED_P2SH_P2WSH_PSBT_B43,
        SIGNED_P2SH_P2WSH_PSBT_B58,
        SIGNED_P2SH_P2WSH_PSBT_B64,
        SIGNED_P2SH_P2WSH_PSBT_UR_PSBT,
        MISSING_GLOBAL_XPUBS_PSBT,
    )


def test_init_singlesig(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE, FORMAT_PMOFN, FORMAT_UR

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, False, NETWORKS["test"]))
    cases = [
        (tdata.P2WPKH_PSBT, FORMAT_NONE),
        (tdata.P2WPKH_PSBT_B43, FORMAT_PMOFN),
        (tdata.P2WPKH_PSBT_B58, FORMAT_PMOFN),
        (tdata.P2WPKH_PSBT_B64, FORMAT_PMOFN),
        (tdata.P2WPKH_PSBT_UR_PSBT, FORMAT_UR),
        (tdata.P2SH_P2WPKH_PSBT, FORMAT_NONE),
        (tdata.P2SH_P2WPKH_PSBT_B43, FORMAT_PMOFN),
        (tdata.P2SH_P2WPKH_PSBT_B58, FORMAT_PMOFN),
        (tdata.P2SH_P2WPKH_PSBT_B64, FORMAT_PMOFN),
        (tdata.P2SH_P2WPKH_PSBT_UR_PSBT, FORMAT_UR),
    ]

    for case in cases:
        signer = PSBTSigner(wallet, case[0], case[1])
        assert isinstance(signer, PSBTSigner)


def test_init_multisig(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE, FORMAT_PMOFN, FORMAT_UR

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, True, NETWORKS["test"]))
    cases = [
        (tdata.P2WSH_PSBT, FORMAT_NONE),
        (tdata.P2WSH_PSBT_B43, FORMAT_PMOFN),
        (tdata.P2WSH_PSBT_B58, FORMAT_PMOFN),
        (tdata.P2WSH_PSBT_B64, FORMAT_PMOFN),
        (tdata.P2WSH_PSBT_UR_PSBT, FORMAT_UR),
        (tdata.P2SH_P2WSH_PSBT, FORMAT_NONE),
        (tdata.P2SH_P2WSH_PSBT_B43, FORMAT_PMOFN),
        (tdata.P2SH_P2WSH_PSBT_B58, FORMAT_PMOFN),
        (tdata.P2SH_P2WSH_PSBT_B64, FORMAT_PMOFN),
        (tdata.P2SH_P2WSH_PSBT_UR_PSBT, FORMAT_UR),
    ]

    for case in cases:
        signer = PSBTSigner(wallet, case[0], case[1])
        assert isinstance(signer, PSBTSigner)


def test_init_fails_on_invalid_psbt(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from ur.ur import UR
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE, FORMAT_UR

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, False, NETWORKS["test"]))

    cases = [
        ("thisisnotavalidpsbt", FORMAT_NONE),
        (UR("unknown-type", bytearray("thisisnotavalidpsbt".encode())), FORMAT_UR),
    ]
    for case in cases:
        with pytest.raises(ValueError):
            PSBTSigner(wallet, case[0], case[1])


def test_sign_singlesig(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE, FORMAT_PMOFN, FORMAT_UR

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, False, NETWORKS["test"]))
    cases = [
        (tdata.P2WPKH_PSBT, FORMAT_NONE, tdata.SIGNED_P2WPKH_PSBT),
        (tdata.P2WPKH_PSBT_B43, FORMAT_PMOFN, tdata.SIGNED_P2WPKH_PSBT_B43),
        (tdata.P2WPKH_PSBT_B58, FORMAT_PMOFN, tdata.SIGNED_P2WPKH_PSBT_B58),
        (tdata.P2WPKH_PSBT_B64, FORMAT_PMOFN, tdata.SIGNED_P2WPKH_PSBT_B64),
        (tdata.P2WPKH_PSBT_UR_PSBT, FORMAT_UR, tdata.SIGNED_P2WPKH_PSBT_UR_PSBT),
        (tdata.P2SH_P2WPKH_PSBT, FORMAT_NONE, tdata.SIGNED_P2SH_P2WPKH_PSBT),
        (tdata.P2SH_P2WPKH_PSBT_B43, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WPKH_PSBT_B43),
        (tdata.P2SH_P2WPKH_PSBT_B58, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WPKH_PSBT_B58),
        (tdata.P2SH_P2WPKH_PSBT_B64, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WPKH_PSBT_B64),
        (
            tdata.P2SH_P2WPKH_PSBT_UR_PSBT,
            FORMAT_UR,
            tdata.SIGNED_P2SH_P2WPKH_PSBT_UR_PSBT,
        ),
        (tdata.P2WPKH_PSBT, FORMAT_PMOFN, tdata.SIGNED_P2WPKH_PSBT_B64),
        (tdata.P2SH_P2WPKH_PSBT, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WPKH_PSBT_B64),
    ]

    num = 0
    for case in cases:
        print("test_sign_singlesig case: ", num)
        num += 1
        signer = PSBTSigner(wallet, case[0], case[1])
        signer.sign()
        assert signer.psbt_qr() == (case[2], case[1])


def test_sign_multisig(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE, FORMAT_PMOFN, FORMAT_UR

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, True, NETWORKS["test"]))
    cases = [
        (tdata.P2WSH_PSBT, FORMAT_NONE, tdata.SIGNED_P2WSH_PSBT),
        (tdata.P2WSH_PSBT_B43, FORMAT_PMOFN, tdata.SIGNED_P2WSH_PSBT_B43),
        (tdata.P2WSH_PSBT_B58, FORMAT_PMOFN, tdata.SIGNED_P2WSH_PSBT_B58),
        (tdata.P2WSH_PSBT_B64, FORMAT_PMOFN, tdata.SIGNED_P2WSH_PSBT_B64),
        (tdata.P2WSH_PSBT_UR_PSBT, FORMAT_UR, tdata.SIGNED_P2WSH_PSBT_UR_PSBT),
        (tdata.P2SH_P2WSH_PSBT, FORMAT_NONE, tdata.SIGNED_P2SH_P2WSH_PSBT),
        (tdata.P2SH_P2WSH_PSBT_B43, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WSH_PSBT_B43),
        (tdata.P2SH_P2WSH_PSBT_B58, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WSH_PSBT_B58),
        (tdata.P2SH_P2WSH_PSBT_B64, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WSH_PSBT_B64),
        (
            tdata.P2SH_P2WSH_PSBT_UR_PSBT,
            FORMAT_UR,
            tdata.SIGNED_P2SH_P2WSH_PSBT_UR_PSBT,
        ),
        (tdata.P2WSH_PSBT, FORMAT_PMOFN, tdata.SIGNED_P2WSH_PSBT_B64),
        (tdata.P2SH_P2WSH_PSBT, FORMAT_PMOFN, tdata.SIGNED_P2SH_P2WSH_PSBT_B64),
    ]

    for case in cases:
        signer = PSBTSigner(wallet, case[0], case[1])
        signer.sign()
        assert signer.psbt_qr() == (case[2], case[1])


def test_sign_fails_with_0_sigs_added(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, True, NETWORKS["test"]))
    signer = PSBTSigner(wallet, tdata.P2WSH_PSBT, FORMAT_NONE)
    mocker.patch.object(signer.psbt, "sign_with", mocker.MagicMock(return_value=0))

    with pytest.raises(ValueError):
        signer.sign()
    signer.psbt.sign_with.assert_called_with(wallet.key.root)


def test_outputs_singlesig(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, False, NETWORKS["test"]))
    cases = [
        (
            tdata.P2WPKH_PSBT,
            [
                "Inputs (1): ₿ 1.00 000 000\n\nSpend (1): ₿ 0.10 000 000\n\nSelf-transfer or Change (1): ₿ 0.89 997 180\n\nFee: ₿ 0.00 002 820 (0.1%)",
                "1. Spend: \n\ntb1que40al7rsw88ru9z0vr78vqwme4w3ctqj694kx\n\n₿ 0.10 000 000",
                "1. Change: \n\ntb1q9u62588spffmq4dzjxsr5l297znf3z6j5p2688\n\n₿ 0.89 997 180",
            ],
        ),
        (
            tdata.P2SH_P2WPKH_PSBT,
            [
                "Inputs (1): ₿ 1.00 000 000\n\nSpend (1): ₿ 0.10 000 000\n\nSelf-transfer or Change (1): ₿ 0.89 996 700\n\nFee: ₿ 0.00 003 300 (0.1%)",
                "1. Spend: \n\ntb1que40al7rsw88ru9z0vr78vqwme4w3ctqj694kx\n\n₿ 0.10 000 000",
                "1. Change: \n\n2MvdUi5o3f2tnEFh9yGvta6FzptTZtkPJC8\n\n₿ 0.89 996 700",
            ],
        ),
    ]

    for case in cases:
        signer = PSBTSigner(wallet, case[0], FORMAT_NONE)
        outputs, _ = signer.outputs()
        assert outputs == case[1]


def test_outputs_multisig(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, True, NETWORKS["test"]))
    cases = [
        (
            tdata.P2WSH_PSBT,
            [
                "Inputs (2): ₿ 0.20 000 000\n\nSpend (1): ₿ 0.18 993 880\n\nSelf-transfer or Change (1): ₿ 0.01 000 000\n\nFee: ₿ 0.00 006 120 (0.1%)",
                "1. Spend: \n\ntb1q35pg2rdt3p0v27dmdh9st43q8vzl29cps6kt3yradnqmg55eahfqfgn83n\n\n₿ 0.18 993 880",
                "1. Self-transfer: \n\ntb1q4xgr8suxvgenukgf4c7r6qaawxxmy9zelh24q8hg5pfxzn2ekn3qfw808t\n\n₿ 0.01 000 000",
            ],
        ),
        (
            tdata.P2SH_P2WSH_PSBT,
            [
                "Inputs (1): ₿ 1.00 000 000\n\nSpend (1): ₿ 0.10 000 000\n\nSelf-transfer or Change (1): ₿ 0.89 995 740\n\nFee: ₿ 0.00 004 260 (0.1%)",
                "1. Spend: \n\ntb1que40al7rsw88ru9z0vr78vqwme4w3ctqj694kx\n\n₿ 0.10 000 000",
                "1. Self-transfer: \n\n2N3vYfcg14Axr4NN33ADUorE2kEGEchFJpC\n\n₿ 0.89 995 740",
            ],
        ),
    ]

    for case in cases:
        signer = PSBTSigner(wallet, case[0], FORMAT_NONE)
        outputs, _ = signer.outputs()
        assert outputs == case[1]


def test_xpubs_fails_with_no_xpubs(mocker, m5stickv, tdata):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_NONE

    wallet = Wallet(Key(tdata.TEST_MNEMONIC, True, NETWORKS["test"]))

    with pytest.raises(ValueError):
        signer = PSBTSigner(wallet, tdata.MISSING_GLOBAL_XPUBS_PSBT, FORMAT_NONE)
        signer.xpubs()


def test_sign_single_1_input_1_output_no_change(m5stickv):
    from embit.networks import NETWORKS
    from krux.psbt import PSBTSigner
    from krux.key import Key
    from krux.wallet import Wallet
    from krux.qr import FORMAT_PMOFN

    MNEMONIC = "action action action action action action action action action action action action"
    PSBT_B64 = "cHNidP8BAFMCAAAAAcfPlS2RvKvXxP/UxRmlAzMZcpLPKTOsBNbFM1JpT5Q7BwAAAAD9////AXAXAAAAAAAAF6kUK7ey9d8Pcw7ufsChrS3L5Ays13SHEgQlAE8BBDWHzwNOAaDGgAAAAA6sE2xHBRocbxB2m7sG3JvBy6PH2P+6FU8Xz26TLNf+Ax8/bmYn6gHZ6KY5opTh2Ajf+3sKBpZ40s59aYtcEnY+EODFlcVUAACAAQAAgAAAAIAAAQD9fQECAAAAAwZh04JGb3rJ3RJGINf/5lNG3RFk9DQyfqaKJK336OcaAQAAAAD9////pZE7Tecrp3E9O5JGSLma4D5TCG5N3uD4deLODBvkt4EAAAAAAP3///+lkTtN5yuncT07kkZIuZrgPlMIbk3e4Ph14s4MG+S3gQEAAAAA/f///wgsAQAAAAAAABYAFARbVWJaVJuYh2b3/HFtU3tQ9eoCLAEAAAAAAAAWABT4gSb5k7/g3ZrEXLyHFlP/C11NFCwBAAAAAAAAFgAU04NlSannloiWwZHvG1uf9aL0NPosAQAAAAAAABYAFNDJ5cj/6H72UNT95nAOLylXp/S5LAEAAAAAAAAWABTj8DqdkD3qZujRRRl4HlpWaADUBywBAAAAAAAAFgAUmPKKcthXsgBlI5AZbJtdEUrFe6gsAQAAAAAAABYAFF1lFcZm2E/gjALNKEfBtzGMsrsqmRgAAAAAAAAWABRk/PxLrogzR/Meytzu0v72RMgGh878JAABAR+ZGAAAAAAAABYAFGT8/EuuiDNH8x7K3O7S/vZEyAaHAQMEAQAAACIGAloQH2tjbm2ayZtJb2Gb0juSNIH9MIoEfX2UW0zE3l/SGODFlcVUAACAAQAAgAAAAIAAAAAAYwAAAAAA"
    OUTPUT = [
        "Inputs (1): ₿ 0.00 006 297\n\nSpend (1): ₿ 0.00 006 000\n\nFee: ₿ 0.00 000 297 (5.0%)",
        "1. Spend: \n\n2MwEP7AfPt8NC65ACmcUhUtDZgGSxYiWUy4\n\n₿ 0.00 006 000",
    ]

    wallet = Wallet(Key(MNEMONIC, False, NETWORKS["test"]))
    signer = PSBTSigner(wallet, PSBT_B64, FORMAT_PMOFN)
    outputs, _ = signer.outputs()
    assert outputs == OUTPUT
